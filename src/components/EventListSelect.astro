---
import { Image } from "astro:assets";
import { newtClient } from "../libs/newt";
import type { Article } from "../libs/newt";
import FormatDate from "./formatDate.astro";
import Button from "./Button.astro";
import PageBody from "./PageBody.astro";

export interface Props {
  tags?: string;
  classNames?: string;
  limit?: number;
}
const { tags, limit, classNames } = Astro.props;
const tagId = tags && tags;

const { items: events } = await newtClient.getContents<Article>({
  appUid: "event",
  modelUid: "article",
  query: {
    select: ["_id", "_sys", "title", "slug", "body", "coverImage"],
    order: ["-_priority", "-_sys.customOrder"],
    tags: tagId,
    limit: limit,
  },
});
---

<PageBody>
  <ul class="list">
    {
      events.map((eventsItem) => {
        return (
          <li>
            <label class="heading" for={eventsItem._id}>
              <input
                type="checkbox"
                name={eventsItem._id}
                id={eventsItem._id}
                class="js-tourEventInput"
                value={eventsItem.title}
              />
              <div>
                <p>選択する</p>
              </div>
            </label>
            <label for={eventsItem._id} class="inner">
              <figure>
                <Image
                  src={eventsItem.coverImage.src}
                  width={200 * 2}
                  height={133 * 2}
                  alt={eventsItem.title}
                />
              </figure>
              <div class="body">
                <h3>{eventsItem.title}</h3>
              </div>
            </label>
          </li>
        );
      })
    }
  </ul>
</PageBody>

<div class="bar">
  <p class="js-tourEventReset">すべてをリセット</p>

  <a href="/404" data-astro-reload class="button">まとめて予約する</a>

  <p class="text">
    <span class="js-tourEventCount">0</span>
    <span>/</span>
    <span class="js-tourEventTotal"></span>
  </p>
</div>

<script>
  import $ from "jquery";
  import { Base64 } from "js-base64";
  function eventListSelect() {
    function inputTotal() {
      const $checkbox = $(".js-tourEventInput");
      const $checkboxNum = $checkbox.length;
      $(".js-tourEventTotal").text($checkboxNum);
      $checkbox.each(function () {
        $(this).on("change", function () {
          const $checked = $(".js-tourEventInput:checked");
          const $checkedNum = $checked.length;
          $(".js-tourEventCount").text($checkedNum);
        });
      });
    }

    function inputReset() {
      // すべてリセット
      $(".js-tourEventReset").on("click", function () {
        $(".js-tourEventInput").prop("checked", false);
        $(".js-tourEventCount").text("0");

        const reservationLink = $(".bar a");
        reservationLink.attr("href", `/404`);
      });
    }

    function inputSend() {
      const $checkbox = $(".js-tourEventInput");

      $checkbox.on("change", function () {
        const $checked = $(".js-tourEventInput:checked");
        const selectedValues = $checked
          .map(function () {
            const selectedValue = $(this).attr("value");
            return selectedValue;
          })
          .get();

        if (selectedValues.length === 0) {
          const reservationLink = $(".bar a");
          reservationLink.attr("href", `/404`);
        } else {
          const selectedValuesString = selectedValues.join(",");

          (function () {
            var aaa = Base64.encode(selectedValuesString);

            var bbb = Base64.decode(aaa);
          })();
          const encryptedValuesString = Base64.encode(selectedValuesString);

          const reservationLink = $(".bar a");
          reservationLink.attr("href", `/events/form/?selectedEvents=${encryptedValuesString}`);
        }
      });
    }
    function blowserBack() {
      // ブラウザバック時
      window.addEventListener("pageshow", () => {
        if (performance.getEntriesByType("navigation")[0].type === "back_forward") {
          const $checkedInput = $(".js-tourEventInput:checked");
          const $checkedNum = $checkedInput.length;
          $(".js-tourEventCount").text($checkedNum);

          const $checked = $(".js-tourEventInput:checked");
          const selectedValues = $checked
            .map(function () {
              const selectedValue = $(this).attr("value");
              return selectedValue;
            })
            .get();
          if (selectedValues.length === 0) {
            const reservationLink = $(".bar a");
            reservationLink.attr("href", `/404`);
          } else {
            const selectedValuesString = selectedValues.join(",");

            (function () {
              var aaa = Base64.encode(selectedValuesString);

              var bbb = Base64.decode(aaa);
            })();
            const encryptedValuesString = Base64.encode(selectedValuesString);

            const reservationLink = $(".bar a");
            reservationLink.attr("href", `/events/form/?selectedEvents=${encryptedValuesString}`);
          }
        }
      });
    }
    $(function () {
      inputTotal();

      inputReset();
      inputSend();
      blowserBack();
    });
  }

  eventListSelect();
  document.addEventListener("astro:after-swap", eventListSelect);
</script>
<style lang="scss">
  .list {
    li {
      border: 1px solid;
      border-radius: 16px;
      overflow: hidden;
      &:not(:last-of-type) {
        margin-bottom: 24px;
      }
      figure {
        max-width: 200px;
      }
      .heading {
        background-color: $text-color;
        color: $white;
        display: flex;
        padding: 20px;
        gap: 10px;
        input[type="checkbox"] {
          width: 20px;
        }
      }
      .inner {
        display: flex;
        align-items: center;
        gap: 30px;
        padding: 20px;
      }
      h3 {
        font-size: 2.2rem;
        margin-bottom: 8px;
      }
    }
  }
  label {
    cursor: pointer;
  }
  .bar {
    position: fixed;
    bottom: 0;
    background-color: #e9edf7;
    width: 100%;
    left: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
    gap: 30px;
  }
  .button {
    background-color: $text-color;
    width: fit-content;

    display: block;
    color: white;
    padding: 1em 3em;
    border-radius: 40px;
  }
  .text {
    font-size: 2.8rem;
    letter-spacing: 0.1em;
  }
</style>
